{
	"name": "transform_customer_data",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparksmall001",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "1bb15dd0-a27b-4047-8af7-5ebfaa1969ec"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/c9a2b097-83d7-4ec1-8355-dbd181b27e99/resourceGroups/om-synapse-demo/providers/Microsoft.Synapse/workspaces/om-weu-syn-001/bigDataPools/sparksmall001",
				"name": "sparksmall001",
				"type": "Spark",
				"endpoint": "https://om-weu-syn-001.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparksmall001",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"# Parameter cell to define default values for notebook input parameters\r\n",
					"pipeline_trigger_time = \"2022-01-01 12:00:00\"\r\n",
					"data_source_id = \"01_100\"\r\n",
					"database_schema = \"SalesLT\""
				],
				"execution_count": 31
			},
			{
				"cell_type": "code",
				"source": [
					"%run utils/pyspark_helper_functions"
				],
				"execution_count": 32
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Define relevant entities\r\n",
					"entities = [\"Customer\", \"Address\", \"CustomerAddress\"]\r\n",
					"\r\n",
					"# Create empty dictionaries for input datasets and schemas\r\n",
					"df_dict = {}\r\n",
					"schema_dict = {}"
				],
				"execution_count": 33
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Dataset 1: Customer"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Define schema for Customer entity, no loops for readability\r\n",
					"schema_dict[\"Customer\"] = StructType([\\\r\n",
					"    StructField(\"CustomerID\", StringType(), False),\\\r\n",
					"    StructField(\"NameStyle\", BooleanType(), True),\\\r\n",
					"    StructField(\"Title\", StringType(), True),\\\r\n",
					"    StructField(\"FirstName\", StringType(), True),\\\r\n",
					"    StructField(\"MiddleName\", StringType(), True),\\\r\n",
					"    StructField(\"LastName\", StringType(), True),\\\r\n",
					"    StructField(\"Suffix\", StringType(), True),\\\r\n",
					"    StructField(\"CompanyName\", StringType(), True),\\\r\n",
					"    StructField(\"SalesPerson\", StringType(), True),\\\r\n",
					"    StructField(\"EmailAddress\", StringType(), True),\\\r\n",
					"    StructField(\"Phone\", StringType(), True),\\\r\n",
					"    StructField(\"PasswordHash\", StringType(), True),\\\r\n",
					"    StructField(\"PasswordSalt\", StringType(), True),\\\r\n",
					"    StructField(\"rowguid\", StringType(), True),\\\r\n",
					"    StructField(\"ModifiedDate\", DateType(), True)]) "
				],
				"execution_count": 34
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Dataset 2: Address"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Define schema for Address entity, no loops for readability\r\n",
					"schema_dict[\"Address\"] = StructType([\\\r\n",
					"    StructField(\"AddressID\", IntegerType(), False),\\\r\n",
					"    StructField(\"AddressLine1\", StringType(), True),\\\r\n",
					"    StructField(\"AddressLine2\", StringType(), True),\\\r\n",
					"    StructField(\"City\", StringType(), True),\\\r\n",
					"    StructField(\"StateProvince\", StringType(), True),\\\r\n",
					"    StructField(\"CountryRegion\", StringType(), True),\\\r\n",
					"    StructField(\"PostalCode\", StringType(), True),\\\r\n",
					"    StructField(\"rowguid\", StringType(), True),\\\r\n",
					"    StructField(\"ModifiedDate\", DateType(), True)]) "
				],
				"execution_count": 35
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Dataset 3: Customer Address"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Define schema for CustomerAddress entity, no loops for readability\r\n",
					"schema_dict[\"CustomerAddress\"] = StructType([\\\r\n",
					"    StructField(\"CustomerID\", IntegerType(), False),\\\r\n",
					"    StructField(\"AddressID\", IntegerType(), False),\\\r\n",
					"    StructField(\"AddressType\", StringType(), True),\\\r\n",
					"    StructField(\"rowguid\", StringType(), True),\\\r\n",
					"    StructField(\"ModifiedDate\", DateType(), True)]) "
				],
				"execution_count": 36
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Load datasets"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"for entity in entities:\r\n",
					"\r\n",
					"    input_path = get_folder_path(\r\n",
					"        tier='bronze',\r\n",
					"        data_source_id=data_source_id,\r\n",
					"        database_schema=database_schema,\r\n",
					"        entity=entity,\r\n",
					"        dt=pipeline_trigger_time,\r\n",
					"        add_file_name=True,\r\n",
					"        extension=\"csv\"\r\n",
					"    )\r\n",
					"\r\n",
					"    df_dict[entity] = read_dataframe(\r\n",
					"        input_path,\r\n",
					"        header='true',\r\n",
					"        schema=schema_dict[entity])\r\n",
					"\r\n",
					"    df_dict[entity].printSchema()"
				],
				"execution_count": 37
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Join datasets"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Rename ModifiedDate columns to be entity specific\r\n",
					"df_dict[\"Address\"] = df_dict[\"Address\"].withColumnRenamed(\"ModifiedDate\", \"AddrModifiedDate\")\r\n",
					"df_dict[\"CustomerAddress\"] = df_dict[\"CustomerAddress\"].withColumnRenamed(\"ModifiedDate\", \"CustAddrModifiedDate\")"
				],
				"execution_count": 38
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Join Customer and CustomerAddress on CustomerID\r\n",
					"output_df = left_join_dataframes(\r\n",
					"    df_left = df_dict[\"Customer\"],\r\n",
					"    df_right = df_dict[\"CustomerAddress\"],\r\n",
					"    col_left = \"CustomerID\",\r\n",
					"    col_right = \"CustomerID\")\r\n",
					"\r\n",
					"# Join Address on AddressID\r\n",
					"output_df = left_join_dataframes(\r\n",
					"    df_left = output_df,\r\n",
					"    df_right = df_dict[\"Address\"],\r\n",
					"    col_left = \"AddressID\",\r\n",
					"    col_right = \"AddressID\")"
				],
				"execution_count": 39
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Drop duplicate rowguid columns\r\n",
					"output_df = output_df.drop(df_dict[\"Address\"].rowguid).drop(df_dict[\"CustomerAddress\"].rowguid)"
				],
				"execution_count": 40
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Write dataset"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"output_path = get_folder_path(\r\n",
					"    tier='silver',\r\n",
					"    data_source_id=data_source_id,\r\n",
					"    database_schema=database_schema,\r\n",
					"    entity=\"dimCustomer\",\r\n",
					"    dt=pipeline_trigger_time,\r\n",
					")\r\n",
					"\r\n",
					"write_dataframe(\r\n",
					"    df=output_df,\r\n",
					"    path=output_path,\r\n",
					"    csv=True,\r\n",
					"    parquet=True,\r\n",
					"    partitions=1)"
				],
				"execution_count": 42
			}
		]
	}
}