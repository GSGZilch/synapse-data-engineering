{
	"name": "pyspark_helper_functions",
	"properties": {
		"folder": {
			"name": "utils"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "3f6e898d-4ba8-4f21-bbeb-a8dbe43b62ae"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.types import StructType, StructField, StringType, ArrayType\r\n",
					"from pyspark.sql.functions import *\r\n",
					"from pyspark.sql.types import *\r\n",
					"from datetime import datetime"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def read_dataframe(file_path, file_type=None, header=None, schema=None, verbose=False):    \r\n",
					"    if file_type is None: file_type = file_path.split('.')[-1]\r\n",
					"    df = spark.read.format(file_type)\r\n",
					"    if header is not None: df = df.option('header', header)\r\n",
					"    if schema is not None: df = df.schema(schema)\r\n",
					"    df = df.load(file_path)\r\n",
					"\r\n",
					"    if verbose:\r\n",
					"        df.printSchema()\r\n",
					"        df.show()\r\n",
					"\r\n",
					"    return df"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def write_dataframe(df, path, partitions, csv=True, parquet=False, json=False):\r\n",
					"    df = df.repartition(partitions)\r\n",
					"\r\n",
					"    if csv: df.write.csv(f\"{filepath}/csv/\", mode='overwrite', header = 'true') \r\n",
					"    if parquet: df.write.parquet(f\"{filepath}/parquet/\", mode='overwrite') \r\n",
					"    if json: df.write.json(f\"{filepath}/json/\", mode='overwrite')"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def extract_datetime_attributes(dt: str):\r\n",
					"    # Convert to datetime object\r\n",
					"    dt = datetime.strptime(dt, \"%Y-%m-%d %H:%M:%S\")\r\n",
					"\r\n",
					"    # Extract year, month and day from pipeline trigger time\r\n",
					"    return (dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second)"
				],
				"execution_count": null
			}
		]
	}
}