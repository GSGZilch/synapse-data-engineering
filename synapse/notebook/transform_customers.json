{
	"name": "transform_customers",
	"properties": {
		"folder": {
			"name": "legacy"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spark06",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "3b645bba-1c6c-47ca-a03f-d903aee477a9"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/e2dfd859-bf21-4372-81d0-02afa53724d0/resourceGroups/rg-mdw778t05/providers/Microsoft.Synapse/workspaces/syn-mdw778t05-dev/bigDataPools/spark06",
				"name": "spark06",
				"type": "Spark",
				"endpoint": "https://syn-mdw778t05-dev.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark06",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 8,
				"memory": 56
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"## FOURTH COFFEE RAW DATA ##\r\n",
					"df_fc = spark.read.load(\r\n",
					"    'abfss://dls@dlsmdw778t05dev.dfs.core.windows.net/bronze/fourthcoffee/rentals/Customers.csv', \r\n",
					"    format='csv', sep=',')\r\n",
					"\r\n",
					"display(df_fc.limit(3))"
				],
				"execution_count": 34
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## IMPORTS ##\r\n",
					"from pyspark.sql.functions import concat,col\r\n",
					"import pyspark.sql.functions as f\r\n",
					"from pyspark.sql.functions import *\r\n",
					"from pyspark.sql.types import *\r\n",
					"from pyspark.sql.functions import lit"
				],
				"execution_count": 35
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"########################\r\n",
					"## CUSTOMER DATAFRAME ##\r\n",
					"########################\r\n",
					"\r\n",
					"#Set Filepath for FourthCoffee data\r\n",
					"PATH = 'abfss://dls@dlsmdw778t05dev.dfs.core.windows.net/bronze/fourthcoffee/rentals/Customers.csv'"
				],
				"execution_count": 36
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"#Create Schema for Fourth Coffee Customer DF\r\n",
					"schema = StructType([\\\r\n",
					"    StructField(\"CustomerID\", StringType(), True),\\\r\n",
					"    StructField(\"FirstName\", StringType(), True),\\\r\n",
					"    StructField(\"LastName\", StringType(), True),\\\r\n",
					"    StructField(\"AddressLine1\", StringType(), True),\\\r\n",
					"    StructField(\"AddressLine2\", StringType(), True),\\\r\n",
					"    StructField(\"City\", StringType(), True),\\\r\n",
					"    StructField(\"State\", StringType(), True),\\\r\n",
					"    StructField(\"ZipCode\", StringType(), True),\\\r\n",
					"    StructField(\"PhoneNumber\", StringType(), True),\\\r\n",
					"    StructField(\"CreatedDate\", DateType(), True),\\\r\n",
					"    StructField(\"UpdatedDate\", DateType(), True)])\r\n",
					"\r\n",
					"df_fc = spark.read.format(\"csv\")\\\r\n",
					".option(\"header\", \"false\")\\\r\n",
					".schema(schema)\\\r\n",
					".load(PATH)\r\n",
					"\r\n",
					"display(df_fc.limit(3))"
				],
				"execution_count": 37
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"#Create VanArsdel Customer DF\r\n",
					"\r\n",
					"df_vc = spark.read.load(\r\n",
					"    'abfss://dls@dlsmdw778t05dev.dfs.core.windows.net/bronze/vanarsdelltd/OnPremRentals/2022/05/11/Customers-082917.csv', \r\n",
					"    format='csv', sep=';', header=True)\r\n",
					"\r\n",
					"display(df_vc.limit(3))"
				],
				"execution_count": 38
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"#Create Southridge Customer DF\r\n",
					"\r\n",
					"df_sc = spark.read.load(\r\n",
					"    'abfss://dls@dlsmdw778t05dev.dfs.core.windows.net/bronze/southridge/cloudsales/2022/05/11/Customers-082917.csv', \r\n",
					"    format='csv', sep=';', header=True)\r\n",
					"\r\n",
					"display(df_sc.limit(3))"
				],
				"execution_count": 39
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"#Add SourceID Column to Fourth Coffee Customer DF\r\n",
					"\r\n",
					"df_fc = df_fc.withColumn(\"SourceID\", lit(3))\r\n",
					"display(df_fc.limit(3))"
				],
				"execution_count": 40
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"#Add SourceID Column to VanArsdel Customer DF\r\n",
					"\r\n",
					"df_vc = df_vc.withColumn(\"SourceID\", lit(2))\r\n",
					"display(df_vc.limit(3))"
				],
				"execution_count": 41
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"#Add SourceID Column to Southridge Customer DF\r\n",
					"\r\n",
					"df_sc = df_sc.withColumn(\"SourceID\", lit(1))\r\n",
					"display(df_sc.limit(3))"
				],
				"execution_count": 42
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"#Add UniqueID Column to Fourth Coffee Customer DF\r\n",
					"\r\n",
					"df_fc = df_fc.withColumn('UniqueID', f.concat_ws('_', df_fc.SourceID, df_fc.CustomerID))"
				],
				"execution_count": 43
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Add UniqueID Column to VanArsdel Customer DF\r\n",
					"\r\n",
					"df_vc = df_vc.withColumn('UniqueID', f.concat_ws('_', df_vc.SourceID, df_vc.CustomerID))"
				],
				"execution_count": 44
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"#Add UniqueID Column to Southridge Customer DF\r\n",
					"\r\n",
					"df_sc = df_sc.withColumn('UniqueID', f.concat_ws('_', df_sc.SourceID, df_sc.CustomerID))\r\n",
					"display(df_sc.limit(3))"
				],
				"execution_count": 45
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"#Display final Fourth Coffee Customer Dataframe\r\n",
					"\r\n",
					"final_fc = df_fc.select(col(\"CustomerID\"),col(\"FirstName\"),col(\"LastName\"),col(\"PhoneNumber\"),col(\"CreatedDate\"),col(\"UpdatedDate\"),col(\"SourceID\"),col(\"UniqueID\"))\r\n",
					"\r\n",
					"display(final_fc.limit(3))"
				],
				"execution_count": 46
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"#Display final VanArsdel Customer Dataframe\r\n",
					"\r\n",
					"final_vc = df_vc.select(col(\"CustomerID\"),col(\"FirstName\"),col(\"LastName\"),col(\"PhoneNumber\"),col(\"CreatedDate\"),col(\"UpdatedDate\"),col(\"SourceID\"),col(\"UniqueID\"))\r\n",
					"\r\n",
					"display(final_vc.limit(3))"
				],
				"execution_count": 47
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"#Display final Southridge Customer Dataframe\r\n",
					"\r\n",
					"final_sc = df_sc\r\n",
					"\r\n",
					"display(final_sc.limit(3))"
				],
				"execution_count": 48
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# concat vc and fc\r\n",
					"df_customer = final_vc.union(final_fc)\r\n",
					"\r\n",
					"# add southridge data\r\n",
					"df_customer = df_customer.union(final_sc)\r\n",
					"\r\n",
					"df_customer.count() == final_vc.count() + final_fc.count() + final_sc.count()"
				],
				"execution_count": 49
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"########################\r\n",
					"## ADDRESS DATAFRAMES ##\r\n",
					"########################\r\n",
					"\r\n",
					"#Create address tables for each \r\n",
					"df_fa = df_fc\r\n",
					"df_va = df_vc"
				],
				"execution_count": 50
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"#Add AddressID Column to VanArsdel Address DF\r\n",
					"\r\n",
					"df_fa = df_fa.withColumn(\"AddressID\", lit(\"NULL\"))\r\n",
					"\r\n",
					"display(df_fa.limit(3))"
				],
				"execution_count": 51
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"#Add AddressID Column to Fourth Coffee Address DF\r\n",
					"\r\n",
					"df_va = df_va.withColumn(\"AddressID\", lit(\"NULL\"))\r\n",
					"\r\n",
					"display(df_va.limit(3))"
				],
				"execution_count": 52
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"#Add UniqueID Column to Fourth Coffee Address DF\r\n",
					"df_fa = df_fa.withColumn('UniqueID', f.concat_ws('_', df_fa.SourceID, df_fa.CustomerID, df_fa.AddressID))\r\n",
					"\r\n",
					"#Add UniqueID Column to VanArsdel Address DF\r\n",
					"df_va = df_va.withColumn('UniqueID', f.concat_ws('_', df_va.SourceID, df_va.CustomerID, df_va.AddressID))\r\n",
					"\r\n",
					"display(df_fa.limit(3))\r\n",
					"display(df_va.limit(3))"
				],
				"execution_count": 53
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"#Display final Fourth Coffee Address Table\r\n",
					"\r\n",
					"final_fa = df_fa.select(col(\"SourceID\"),col(\"UniqueID\"),col(\"AddressID\"),col(\"CustomerID\"),col(\"AddressLine1\"),col(\"AddressLine2\"),col(\"City\"),col(\"State\"),col(\"ZipCode\"),col(\"CreatedDate\"),col(\"UpdatedDate\"))\r\n",
					"\r\n",
					"display(final_fa.limit(3))"
				],
				"execution_count": 54
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"#Display final VanArsdel Address Table\r\n",
					"\r\n",
					"final_va = df_va.select(col(\"SourceID\"),col(\"UniqueID\"),col(\"AddressID\"),col(\"CustomerID\"),col(\"AddressLine1\"),col(\"AddressLine2\"),col(\"City\"),col(\"State\"),col(\"ZipCode\"),col(\"CreatedDate\"),col(\"UpdatedDate\"))\r\n",
					"\r\n",
					"display(final_va.limit(3))"
				],
				"execution_count": 55
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# read in southridge address\r\n",
					"df_sa = spark.read.load(\r\n",
					"    'abfss://dls@dlsmdw778t05dev.dfs.core.windows.net/bronze/southridge/cloudsales/2022/05/11/Addresses-082917.csv', \r\n",
					"    format='csv', sep=';', header=True)\r\n",
					"\r\n",
					"# add source id and unique id to southridge\r\n",
					"df_sa = df_sa.withColumn(\"SourceID\", lit(1))\r\n",
					"df_sa = df_sa.withColumn('UniqueID', f.concat_ws('_', df_sa.SourceID, df_sa.CustomerID, df_sa.AddressID))\r\n",
					"\r\n",
					"# stack fourthcoffee and vanarsdel\r\n",
					"df_address = final_fa.union(final_va)\r\n",
					"# stack southridge\r\n",
					"df_address = df_address.union(df_sa)\r\n",
					"\r\n",
					"# test if count of final data frame equals sum of individual data frames\r\n",
					"df_address.count() == final_fa.count() + final_va.count() + df_sa.count()"
				],
				"execution_count": 56
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Join"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Join Master Customer table with Master Address table\r\n",
					"master_customer_set = df_customer.join(df_address, df_customer.CustomerID==df_address.CustomerID, \"left\")\r\n",
					"master_customer_set = master_customer_set.drop(df_address.CreatedDate).drop(df_address.CustomerID).drop(df_address.SourceID).drop(df_address.UniqueID).drop(df_address.UpdatedDate).drop(df_customer.CustomerID)\r\n",
					"\r\n",
					"from pyspark.sql import SparkSession \r\n",
					"from pyspark.sql.types import *\r\n",
					"from datetime import datetime\r\n",
					"\r\n",
					"account_name = 'dlsmdw778t05dev'\r\n",
					"container_name = 'dls' \r\n",
					"relative_path = 'silver/'\r\n",
					"adls_path = 'abfss://%s@%s.dfs.core.windows.net/%s' % (container_name, account_name, relative_path) \r\n",
					"print('Primary storage account path: ' + adls_path) \r\n",
					"master_customer_set = master_customer_set.repartition(1)\r\n",
					"dt = datetime.now()\r\n",
					"filepath = f\"{adls_path}customer_address/\" \r\n",
					"master_customer_set.write.csv(f\"{filepath}csv/\", mode='overwrite', header = 'true') \r\n",
					"master_customer_set.write.parquet(f\"{filepath}parquet/\", mode='overwrite') \r\n",
					"master_customer_set.write.json(f\"{filepath}json/\", mode='overwrite')\r\n",
					""
				],
				"execution_count": 73
			}
		]
	}
}