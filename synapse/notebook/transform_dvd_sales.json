{
	"name": "transform_dvd_sales",
	"properties": {
		"folder": {
			"name": "openhack_notebooks"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spark03",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "8eb4105d-c243-429a-909e-273fbde93058"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/e2dfd859-bf21-4372-81d0-02afa53724d0/resourceGroups/rg-mdw778t05/providers/Microsoft.Synapse/workspaces/syn-mdw778t05-dev/bigDataPools/spark03",
				"name": "spark03",
				"type": "Spark",
				"endpoint": "https://syn-mdw778t05-dev.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark03",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\r\n",
					"df_orders = spark.read.load(\r\n",
					"    'abfss://dls@dlsmdw778t05dev.dfs.core.windows.net/bronze/southridge/cloudsales/2022/05/11/Orders-082917.csv', \r\n",
					"    format='csv', sep=';', header=True)\r\n",
					"\r\n",
					"df_order_details = spark.read.load(\r\n",
					"    'abfss://dls@dlsmdw778t05dev.dfs.core.windows.net/bronze/southridge/cloudsales/2022/05/11/OrderDetails-082917.csv', \r\n",
					"    format='csv', sep=';', header=True)\r\n",
					"df_order_details = df_order_details.drop(df_order_details.CreatedDate).drop(df_order_details.UpdatedDate)"
				],
				"execution_count": 24
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(df_orders.limit(5))"
				],
				"execution_count": 25
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(df_order_details.limit(5))"
				],
				"execution_count": 26
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df_sales = df_orders.join(df_order_details, df_orders.OrderID == df_order_details.OrderID, \"leftouter\")\r\n",
					"df_sales = df_sales.drop(df_order_details.OrderID)\r\n",
					"display(df_sales.limit(5))"
				],
				"execution_count": 27
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from pyspark.sql.functions import lit\r\n",
					"from pyspark.sql.functions import concat\r\n",
					"\r\n",
					"df_sales = df_sales.withColumn(\"SourceID\", lit(1))\r\n",
					"df_sales = df_sales.withColumn(\"UniqueOrderID\", concat(df_sales.SourceID, df_sales.OrderDetailID))\r\n",
					"\r\n",
					"display(df_sales.limit(5))"
				],
				"execution_count": 28
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import SparkSession \r\n",
					"from pyspark.sql.types import *\r\n",
					"from datetime import datetime\r\n",
					"   \r\n",
					"account_name = 'dlsmdw778t05dev'\r\n",
					"container_name = 'dls' \r\n",
					"relative_path = 'silver/'\r\n",
					"\r\n",
					"adls_path = 'abfss://%s@%s.dfs.core.windows.net/%s' % (container_name, account_name, relative_path) \r\n",
					"print('Primary storage account path: ' + adls_path) \r\n",
					"\r\n",
					"df_sales = df_sales.repartition(1)\r\n",
					"\r\n",
					"dt = datetime.now()\r\n",
					"\r\n",
					"filepath = f\"{adls_path}dvd_sales/\" \r\n",
					"\r\n",
					"df_sales.write.csv(f\"{filepath}csv/\", mode='overwrite', header = 'true') \r\n",
					"df_sales.write.parquet(f\"{filepath}parquet/\", mode='overwrite') \r\n",
					"df_sales.write.json(f\"{filepath}json/\", mode='overwrite')"
				],
				"execution_count": 31
			}
		]
	}
}